import Obfuscation from './obfuscation';

test('transport | length', () => {
  const obf = new Obfuscation();

  const initpayload = obf.init(0);

  expect(initpayload.length).toBe(16);
  expect(initpayload[0]).not.toBe(0x00);
});

test('transport | obfuscation init', () => {
  const obf = new Obfuscation();

  const initpayload = obf.init(
    0xefefefef,
    new Uint32Array([
      0xffabcdef, 0x07db79b8, 0xb57d3b12, 0x9f161c25, 0xeaf1632e, 0x36d15f06, 0xa71cf4ed, 0x8e18ef11,
      0xc8719c71, 0xe1c2e66c, 0x91d96d97, 0x6dae9c45, 0x6988cad6, 0xfd0efd51, 0x8aa7cdb3, 0xfeff2430,
    ]),
  );

  expect(initpayload).toEqual(
    new Uint32Array([
      0xffabcdef, 0x07db79b8, 0xb57d3b12, 0x9f161c25, 0xeaf1632e, 0x36d15f06, 0xa71cf4ed, 0x8e18ef11,
      0xc8719c71, 0xe1c2e66c, 0x91d96d97, 0x6dae9c45, 0x6988cad6, 0xfd0efd51, 0xcbb56a50, 0x590e498f,
    ]),
  );
});

test('transport | obfuscation rounds', () => {
  const obf = new Obfuscation();
  const zeroed = new Uint32Array(4);

  obf.init(
    0xefefefef,
    new Uint32Array([
      0xffabcdef, 0x76d251b6, 0x65958c01, 0x50cd95d0, 0x474e89ca, 0x22b36c94, 0xc6ab68a3, 0x14b2609f,
      0xf02d6f8d, 0x6b035426, 0x09b2894c, 0x29cfadde, 0x59427f1b, 0x322189ea, 0x429bf094, 0xfeff6035,
    ]),
  );

  expect(obf.encode(zeroed)).toEqual(new Uint32Array([0xf5d5e342, 0xbfe5dae9, 0xc5e2453b, 0x56696082]));
  expect(obf.encode(zeroed)).toEqual(new Uint32Array([0xf81d3d98, 0x0a3c9b56, 0x500b5fa5, 0x92af2fa2]));
  expect(obf.encode(zeroed)).toEqual(new Uint32Array([0xa8f13906, 0x1e47bf70, 0xb119d1e5, 0x15422956]));

  expect(obf.decode(zeroed)).toEqual(new Uint32Array([0x47fd70eb, 0x60c6fc24, 0x76cdd89a, 0xca98c4cd]));
  expect(obf.decode(zeroed)).toEqual(new Uint32Array([0xe8eaa6ad, 0xd12249ba, 0x8e2dd055, 0xd4dcffdb]));
  expect(obf.decode(zeroed)).toEqual(new Uint32Array([0xbc251bcf, 0xf191ac7e, 0x8fc1a7ff, 0x4d25be15]));
});

test('transport | obfuscation real', () => {
  const obf = new Obfuscation();

  const initp = obf.init(
    4008636142,
    new Uint32Array([
      4289449455, 3452546079, 1788317955, 2186783659, 320254335, 2679080564, 795180033, 2779527514,
      1148959518, 736706189, 3377455170, 2985956257, 1123921776, 2235831598, 1275799781, 4248711487,
    ]),
  );

  expect(initp).toEqual(new Uint32Array([
    4289449455, 3452546079, 1788317955, 2186783659, 320254335, 2679080564, 795180033, 2779527514,
    1148959518, 736706189, 3377455170, 2985956257, 1123921776, 2235831598, 2220500043, 3775205634,
  ]));

  expect(obf.encode(
    new Uint32Array([671088640, 0, 0, 77873706, 3853029726, 335544320, 4052647614, 3755301650, 592405371, 3797949043, 1402297070]),
  )).toEqual(
    new Uint32Array([2008889190, 3509792512, 4091984948, 3521999420, 2529971718, 1205528763, 1158985946, 3976017160, 2076128840, 3080983806, 2286077413]),
  );

  expect(obf.decode(new Uint32Array([
    3565710870, 766551384, 374819226, 1787925218, 1438747325, 967937315, 1623912716, 2160422075, 458451121, 1874782247, 2745714511, 2700870023,
    161742505, 1347101544, 3376352641, 1539215727, 2184218714, 939100834, 2820524541, 3281484128, 3612395323, 1848093100, 398542193, 4115272163,
  ]))).toEqual(new Uint32Array([
    1543503872, 0, 0, 26242939, 3886584158, 1207959552, 1663309317, 3755301650, 592405371, 3797949043, 1402297070, 1027755695, 2135311949,
    4083347418, 1657121488, 136437999, 1669650332, 3439329280, 365212956, 33554432, 43994017, 1829802646, 560719980, 36418755,
  ]));

  expect(obf.encode(new Uint32Array([
    1409351680, 0, 0, 70672387, 3869806942, 1073807360, 3202618071, 3755301650, 592405371, 3797949043, 1402297070, 1027755695, 2135311949,
    4083347418, 1657121488, 72641170, 1291845632, 73842036, 2164260864, 560719980, 36418755, 4261413120, 1753347076, 3386287094, 19513172,
    2558587879, 412040485, 2271866144, 3966353970, 4048855205, 2660874261, 4020745895, 793715613, 2238751313, 2919011912, 3624684386, 3548187467,
    1130638591, 3351311194, 2431808512, 1930060847, 618172853, 2070217423, 3624798428, 484182776, 1955608522, 1111368254, 241628998, 1272946250,
    1025562619, 3057733875, 1784312177, 4248472052, 1141020165, 3742838675, 3192907011, 3409833521, 1496641646, 1068361129, 926712687, 2482178215,
    497924140, 2499582337, 3571737140, 601735830, 3861368028, 220579825, 4248810120, 3375258187, 4224623473, 3903275922, 1786253618, 1973256157,
    2137854466, 2492982480, 3176117278, 2908993134, 3238478242, 4184997019, 1580782463, 4106181212, 1115171113, 1172500778, 2722345488, 4049367689,
    2702742698,
  ]))).toEqual(new Uint32Array([
    2933758984, 3076772971, 3273730404, 1272467913, 1947033079, 4004041343, 214513336, 2931120849, 1329742486, 3320522041, 1622095874, 1468018437,
    3138923650, 1306503232, 4165922476, 3334540055, 3277938038, 3116881664, 2506302216, 4062891733, 3883149607, 2929703082, 4258744472, 442795141,
    2616202819, 2940217043, 1040114950, 2119475754, 2822538337, 4125978214, 82947669, 1565639524, 585964677, 3822822402, 3157028117, 751086742,
    1139952331, 115603980, 1236812231, 2019074651, 4221551635, 2664048697, 2113442491, 364496710, 3864335587, 2472242944, 2248281848, 3013608888,
    981677968, 2526156500, 1904063347, 4264737492, 4198691072, 2991100821, 1419956102, 1593042988, 1602918114, 3293224993, 2453079527, 3845468421,
    3968420646, 1996064586, 3331745222, 1981367209, 4191140963, 57025877, 1080372714, 2537970219, 2401826148, 3552611344, 1147844775, 618273734,
    480378443, 416885094, 2321304757, 3981169777, 3962474541, 4096157063, 2778246840, 2415751217, 3198724611, 2860169670, 3175692240, 2443224797,
    4236927080, 3447377821,
  ]));

  expect(
    obf.encode(
      new Uint32Array([
        2348875776, 0, 0, 80736540, 3869806942, 2013331456, 526320885, 3755301650, 592405371, 3797949043, 1402297070, 1027755695, 2135311949,
        4083347418, 1657121488, 4266656000, 2969343097, 2813990996, 3550379277, 1018692917, 1125614469, 2755878047, 2066881117, 3314673065,
        3808812164, 4266725261, 3527968112, 158124639, 3255597124, 676347237, 3783581280, 3599034104, 3674670481, 1602698694, 3153513449, 1504264447,
        1006639820, 116214419, 2322143494, 2815879709, 987876500, 241295355, 420563528, 3432257161, 4240035643, 3706996855, 4269166646, 2340278220,
        648092869, 2771119028, 940149317, 2895106964, 945124724, 3536174676, 578947834, 1216200046, 2117928173, 3868430735, 4029597941, 715684260,
        4274148334, 364385784, 4081669749, 2194523889, 1387050469, 3958251158, 2442241337, 1673071051, 2580685890, 4259991483, 2835587417, 3548847196,
        3150677073, 3532736921, 168164719, 2720525604, 3508837869, 4258151087, 1834947869, 1105394374, 1309219200, 3202676998, 1714469930, 2648106133,
        197240124, 281303751, 2174617750, 1208979965, 3124216217, 4085667971, 1465655262, 980440705, 4118424989, 2744524611, 2457297867, 2558396341,
        333021346, 1701499759, 3041865568, 3858274447,
      ]),
    ),
  ).toEqual(
    new Uint32Array([
      798722726, 4011341536, 4286966340, 2368747607, 1035600324, 601466937, 1697150819, 17044685, 3938003480, 400869975, 2009976707, 2313090146,
      3811973511, 1870931787, 2968545854, 465785826, 612294244, 2173343977, 2742135926, 165719635, 437468914, 1232068292, 4154325744, 574565466,
      1142118994, 3111507152, 1365496553, 173739929, 2971467673, 1458951079, 556831006, 1222142986, 705886902, 1290815168, 3416367036, 2497987921,
      1201507815, 2147383587, 3601632734, 3657651522, 1723810095, 3018551831, 3093034658, 1645389520, 1480743724, 1327414654, 2438517111, 3945386452,
      2645148194, 2047233375, 4158530410, 3577025531, 633682261, 536860384, 2273652164, 3176664111, 1597185823, 2871286829, 3812561599, 2549712077,
      1664736838, 1929433536, 1953520023, 711311794, 488679944, 1024438486, 2058582718, 423401757, 2676673537, 806154661, 196546409, 4006472528,
      4287775770, 1326999937, 2391876748, 618548550, 3661660869, 1226608160, 1570235091, 1322894122, 4259131942, 1063319854, 1040781954, 2028463519,
      2535289713, 1026491231, 3679955260, 1781353782, 470173948, 1568135357, 3526414144, 3801776996, 2857725332, 2526362690, 1733717812, 961183303,
      4011578101, 3880698698, 3055551088, 3135261831,
    ]),
  );
});

test('transport | obfuscation errors', () => {
  let raised = 0;

  const obf = new Obfuscation();

  try {
    obf.encode(new Uint32Array(4));
  } catch (e) {
    expect(e.message.length).toBeGreaterThan(0);
    raised++;
  }

  try {
    obf.decode(new Uint32Array(4));
  } catch (e) {
    expect(e.message.length).toBeGreaterThan(0);
    raised++;
  }

  expect(raised).toBe(2);
});
