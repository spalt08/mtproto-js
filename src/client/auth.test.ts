import { KeyExchangeContext, createCipher, createDHRequestParams, createClientDHParams, createAuthKey, initConnection, bindTempAuthKey } from './auth';
import { ab2i } from '../serialization';
import Client from './client';
import tl from '../mock/tl';
import { AuthKey } from './types';

test('auth | create cipher', () => {
  const ctx: KeyExchangeContext = {
    nonce: new Uint32Array([0x4c546e5e, 0xa5c1d7a4, 0xd8956ac4, 0xe66af237]),
    newNonce: new Uint32Array([0xa0730a3d, 0x662846a9, 0x9d23ab44, 0x12ec51bc, 0x1cd1df99, 0x2b57682d, 0x20985d03, 0xa918d01c]),
    serverNonce: new Uint32Array([0xf3a65684, 0x619b7647, 0xccfd1d95, 0xe55e217e]),
    expiresAfter: 0,
  };

  const cipher = createCipher(ctx);

  expect(cipher.key).toEqual(new Uint32Array([0x57fbad93, 0x1acab855, 0x5e7ca1ca, 0x0f9d1948, 0xdf570aa2, 0x8b8bdd0c, 0x35a1a328, 0xbd150f34]));
  expect(cipher.iv).toEqual(new Uint32Array([0x21e0c2d9, 0x8c201856, 0xa0515762, 0xf79a4308, 0x45dc877b, 0x0d166ace, 0x42e70c22, 0xa0730a3d]));
});

test('auth | createDHRequestParams', () => {
  const random = new Uint32Array([
    0x2257f00e, 0x937d1ddf, 0x217c93a5, 0x4af8bad1, 0x1c8adfcb, 0xf5436dcd, 0xd1fc5493, 0xa878d287, 0x573baffd, 0xb8b67524, 0xee1a4c69, 0x5a4a8751,
    0x45dcc1a1, 0x7a8104fe, 0x6ab7c815, 0x2a39dd73, 0x601d5f30, 0x1e4d808b, 0xf9dcaa62, 0x74a43eb7, 0xad545635, 0x641f7ba7, 0x4d1cba59, 0x2c6ee4ee,
    0x621f71f6, 0x03af1024, 0x3297566a, 0x831aad13, 0x4108ef71, 0x08470485, 0x6473947f, 0x632bf5fb, 0xc4b3226a, 0xcb5efd67, 0xf1ada600,
  ]);

  const ctx: KeyExchangeContext = {
    nonce: new Uint32Array([0x1d4fd969, 0x64dbf837, 0xb96629f5, 0xa936aa1d]),
    newNonce: new Uint32Array([0x13ec88e4, 0xe4a680b5, 0x163f0438, 0x262f19c5, 0xc85ae6f2, 0x48eed49a, 0x41c3057a, 0x087934a7]),
    serverNonce: new Uint32Array([0xbca5cbe1, 0x8b7ff272, 0x0d8a8f4d, 0x9efd6b03]),
    expiresAfter: 0,
    pq: new Uint8Array([0x1d, 0x08, 0x38, 0x32, 0xf9, 0x7b, 0x6e, 0x49]),
    fingerprints: ['9692106da14b9f02', 'c3b42b026ce86b21'],
  };

  const dhReq = createDHRequestParams(ctx, random);

  expect(dhReq.nonce).toEqual(ctx.nonce);
  expect(dhReq.p).toEqual(new Uint8Array([0x43, 0x82, 0x25, 0xe5]));
  expect(dhReq.q).toEqual(new Uint8Array([0x6e, 0x17, 0xe0, 0x95]));
  expect(dhReq.public_key_fingerprint).toEqual('c3b42b026ce86b21');
  expect(dhReq.encrypted_data).toEqual(
    new Uint8Array([
      0x90, 0xbc, 0xab, 0xf1, 0x23, 0x6c, 0xce, 0xcd, 0xbd, 0x1d, 0xc8, 0x2b, 0x7e, 0xf2, 0x0f, 0xfb, 0x48, 0xf9, 0xc1, 0xc2, 0xf8, 0x7d, 0x41,
      0x1f, 0xba, 0xf7, 0x08, 0xc2, 0xf7, 0xc6, 0xf3, 0x3a, 0xf0, 0x3e, 0x7a, 0x62, 0xb0, 0x5b, 0x92, 0xad, 0xdb, 0xfd, 0x2d, 0x00, 0xe3, 0x01, 0x2b,
      0x16, 0x64, 0x32, 0x67, 0x2e, 0x99, 0xd6, 0xe2, 0x8a, 0x5c, 0xfa, 0x1f, 0x94, 0x18, 0xe9, 0xdc, 0xb5, 0x87, 0x1a, 0xfa, 0x91, 0xb8, 0x42, 0x58,
      0xda, 0x43, 0x43, 0xe3, 0xfb, 0x59, 0xfd, 0x2a, 0xd1, 0x92, 0xaf, 0x16, 0x89, 0x72, 0x43, 0x81, 0xba, 0x7d, 0x1d, 0xa4, 0x90, 0x66, 0xd9, 0x52,
      0x60, 0xe2, 0x44, 0x79, 0x7a, 0x2d, 0x01, 0x6d, 0x2a, 0xe8, 0xe9, 0x19, 0xbd, 0xaf, 0xe8, 0x12, 0x22, 0x3e, 0x03, 0x2d, 0xe7, 0xf2, 0x32, 0x7c,
      0x2c, 0x50, 0x63, 0x69, 0xee, 0xf7, 0xd6, 0xfc, 0x04, 0x54, 0xc2, 0xde, 0x33, 0x9e, 0x9a, 0x45, 0x6d, 0x3e, 0x75, 0x9b, 0x28, 0x9b, 0xee, 0x2f,
      0x02, 0x09, 0x1d, 0xae, 0x08, 0xfc, 0x6e, 0x55, 0x1b, 0x60, 0x28, 0xc5, 0xfb, 0x17, 0x2b, 0xb8, 0x3a, 0x45, 0x53, 0x66, 0x9b, 0x61, 0xca, 0x62,
      0xa3, 0xa8, 0xf6, 0xac, 0xad, 0x0a, 0x5e, 0x39, 0xf3, 0x87, 0x57, 0xad, 0x53, 0x91, 0xe2, 0x07, 0x1f, 0xe6, 0x76, 0x74, 0x5b, 0x64, 0x31, 0x93,
      0xc4, 0xad, 0x91, 0xfe, 0x51, 0x9b, 0x7b, 0x53, 0xc7, 0x39, 0xb4, 0x80, 0xd2, 0xb4, 0xf7, 0x67, 0xd8, 0x61, 0xca, 0xd0, 0x12, 0xd9, 0x05, 0x31,
      0xf8, 0xfd, 0x5f, 0x32, 0x57, 0xb1, 0x13, 0x66, 0x3c, 0xde, 0xe1, 0xb0, 0x06, 0x01, 0xa9, 0xdc, 0x06, 0x2e, 0x62, 0x76, 0x87, 0x0d, 0x43, 0x69,
      0xcb, 0xe3, 0xa3, 0xdb, 0x66, 0x51, 0x8d, 0x41, 0x24, 0x91, 0x0a, 0x49, 0xe1, 0xb8, 0x47, 0xd3,
    ]).buffer,
  );
});


test('auth | createClientDHParams', () => {
  const ctx: KeyExchangeContext = {
    nonce: new Uint32Array([0x33bfa240, 0xef1f3fae, 0x73a2b97b, 0x916ed586]),
    newNonce: new Uint32Array([0x44eafbbb, 0xa0822b8d, 0x07e3c786, 0xe789f9ca, 0x5b86730c, 0x0553feaf, 0x9a0a1665, 0x0eb549b8]),
    serverNonce: new Uint32Array([0xc161eb5a, 0x0fe4b4c5, 0xd9c4f53b, 0x2e483522]),
    expiresAfter: 0,
    fingerprints: ['9692106da14b9f02', 'c3b42b026ce86b21'],
    g: 3,
    ga: new Uint8Array([
      0x8f, 0x7d, 0x43, 0xdc, 0xb9, 0xa0, 0xf0, 0x7a, 0x6d, 0x96, 0x63, 0xc7, 0xe0, 0x91, 0x5b, 0xd7, 0x4e, 0x43, 0xc2, 0x57, 0xec, 0xb6, 0x19, 0x97,
      0x81, 0x42, 0x04, 0x9f, 0x8b, 0x3f, 0x59, 0xd9, 0x67, 0xd0, 0x4f, 0xe8, 0x61, 0x7a, 0xd8, 0xa4, 0x55, 0xb6, 0xfd, 0x12, 0x73, 0x4c, 0x57, 0xaf,
      0x60, 0x4b, 0x8c, 0x05, 0xa0, 0xa6, 0x54, 0x5f, 0x84, 0xb8, 0x8b, 0x4c, 0x98, 0xae, 0x38, 0x8a, 0x02, 0xfb, 0xc0, 0x99, 0x31, 0x63, 0x05, 0x6d,
      0xdc, 0xdf, 0x4a, 0xb3, 0x92, 0x37, 0x8a, 0x0c, 0xb8, 0x41, 0xc2, 0x0f, 0x73, 0x00, 0xdd, 0x88, 0x53, 0xc8, 0x0b, 0x1f, 0x1f, 0x1a, 0x9f, 0x9f,
      0xe4, 0x05, 0x49, 0xda, 0xcd, 0x77, 0x0d, 0x10, 0xf0, 0xb2, 0x2c, 0xbe, 0xe4, 0x0b, 0xc6, 0x13, 0x1a, 0x8a, 0xc9, 0x3a, 0x95, 0xaa, 0xee, 0xc6,
      0x37, 0x03, 0x69, 0xab, 0xea, 0xe7, 0xa5, 0x8c, 0x39, 0x29, 0x8e, 0xeb, 0x8f, 0x88, 0x3d, 0x18, 0x5c, 0x9c, 0xcd, 0xbf, 0x44, 0x9e, 0x21, 0x47,
      0x0d, 0x9f, 0x99, 0x39, 0xdd, 0x99, 0xbf, 0x04, 0x84, 0x0e, 0x65, 0x19, 0x55, 0xcf, 0x32, 0xbd, 0x30, 0x07, 0x4f, 0x16, 0x7a, 0xe8, 0x00, 0xad,
      0x04, 0x51, 0x60, 0xfc, 0xf1, 0xbd, 0x5e, 0xae, 0x63, 0x4a, 0x25, 0x6a, 0xc4, 0xa0, 0xa3, 0x47, 0xe8, 0x32, 0x2d, 0x52, 0xa2, 0x6b, 0x15, 0x29,
      0x95, 0xfa, 0x9a, 0x41, 0x12, 0x7e, 0x1f, 0x56, 0xf7, 0x4b, 0x7e, 0xe0, 0x1f, 0x3d, 0x3e, 0x98, 0x62, 0x65, 0xd2, 0xb0, 0xfc, 0x62, 0x45, 0xb5,
      0xbf, 0x2a, 0x7b, 0x99, 0xb8, 0x09, 0x68, 0x8e, 0x93, 0x2b, 0x5e, 0xd5, 0xa3, 0x41, 0x3d, 0x9b, 0xe8, 0x71, 0xfc, 0xf9, 0x42, 0xd4, 0xc4, 0x16,
      0x31, 0x5a, 0x4b, 0xb8, 0x77, 0x40, 0x01, 0xa7, 0xbf, 0x66, 0x6e, 0xeb, 0x82, 0xe4, 0x61, 0xa6,
    ]),
    dh: new Uint8Array([
      0xc7, 0x1c, 0xae, 0xb9, 0xc6, 0xb1, 0xc9, 0x04, 0x8e, 0x6c, 0x52, 0x2f, 0x70, 0xf1, 0x3f, 0x73, 0x98, 0x0d, 0x40, 0x23, 0x8e, 0x3e, 0x21, 0xc1,
      0x49, 0x34, 0xd0, 0x37, 0x56, 0x3d, 0x93, 0x0f, 0x48, 0x19, 0x8a, 0x0a, 0xa7, 0xc1, 0x40, 0x58, 0x22, 0x94, 0x93, 0xd2, 0x25, 0x30, 0xf4, 0xdb,
      0xfa, 0x33, 0x6f, 0x6e, 0x0a, 0xc9, 0x25, 0x13, 0x95, 0x43, 0xae, 0xd4, 0x4c, 0xce, 0x7c, 0x37, 0x20, 0xfd, 0x51, 0xf6, 0x94, 0x58, 0x70, 0x5a,
      0xc6, 0x8c, 0xd4, 0xfe, 0x6b, 0x6b, 0x13, 0xab, 0xdc, 0x97, 0x46, 0x51, 0x29, 0x69, 0x32, 0x84, 0x54, 0xf1, 0x8f, 0xaf, 0x8c, 0x59, 0x5f, 0x64,
      0x24, 0x77, 0xfe, 0x96, 0xbb, 0x2a, 0x94, 0x1d, 0x5b, 0xcd, 0x1d, 0x4a, 0xc8, 0xcc, 0x49, 0x88, 0x07, 0x08, 0xfa, 0x9b, 0x37, 0x8e, 0x3c, 0x4f,
      0x3a, 0x90, 0x60, 0xbe, 0xe6, 0x7c, 0xf9, 0xa4, 0xa4, 0xa6, 0x95, 0x81, 0x10, 0x51, 0x90, 0x7e, 0x16, 0x27, 0x53, 0xb5, 0x6b, 0x0f, 0x6b, 0x41,
      0x0d, 0xba, 0x74, 0xd8, 0xa8, 0x4b, 0x2a, 0x14, 0xb3, 0x14, 0x4e, 0x0e, 0xf1, 0x28, 0x47, 0x54, 0xfd, 0x17, 0xed, 0x95, 0x0d, 0x59, 0x65, 0xb4,
      0xb9, 0xdd, 0x46, 0x58, 0x2d, 0xb1, 0x17, 0x8d, 0x16, 0x9c, 0x6b, 0xc4, 0x65, 0xb0, 0xd6, 0xff, 0x9c, 0xa3, 0x92, 0x8f, 0xef, 0x5b, 0x9a, 0xe4,
      0xe4, 0x18, 0xfc, 0x15, 0xe8, 0x3e, 0xbe, 0xa0, 0xf8, 0x7f, 0xa9, 0xff, 0x5e, 0xed, 0x70, 0x05, 0x0d, 0xed, 0x28, 0x49, 0xf4, 0x7b, 0xf9, 0x59,
      0xd9, 0x56, 0x85, 0x0c, 0xe9, 0x29, 0x85, 0x1f, 0x0d, 0x81, 0x15, 0xf6, 0x35, 0xb1, 0x05, 0xee, 0x2e, 0x4e, 0x15, 0xd0, 0x4b, 0x24, 0x54, 0xbf,
      0x6f, 0x4f, 0xad, 0xf0, 0x34, 0xb1, 0x04, 0x03, 0x11, 0x9c, 0xd8, 0xe3, 0xb9, 0x2f, 0xcc, 0x5b,
    ]),
  };

  const b = new Uint8Array([
    0x54, 0x8c, 0x22, 0x57, 0x08, 0x33, 0x22, 0xb1, 0x43, 0x7a, 0x85, 0x73, 0x50, 0xdd, 0xd5, 0xc4, 0x31, 0x1e, 0xbf, 0x7f, 0x06, 0xc2, 0x4c, 0x45,
    0x66, 0xfd, 0xc6, 0xf0, 0x3b, 0xe6, 0xb4, 0x4a, 0xb6, 0x41, 0xb1, 0x81, 0xe3, 0xcc, 0xc9, 0x80, 0x89, 0x7b, 0x47, 0x62, 0xe8, 0x8d, 0xdf, 0x98,
    0x47, 0x8b, 0x93, 0x8a, 0x68, 0xdc, 0x6e, 0x9a, 0x3e, 0x83, 0x4e, 0x4b, 0x80, 0xca, 0xab, 0x01, 0x27, 0xd0, 0x4f, 0x54, 0xba, 0x5e, 0x14, 0x93,
    0x2a, 0xa0, 0x59, 0x7c, 0xc3, 0x55, 0xfd, 0x88, 0xcf, 0x6b, 0x54, 0xf1, 0xa3, 0x46, 0x39, 0x33, 0x80, 0x86, 0x4a, 0x26, 0x04, 0x28, 0x0e, 0x8e,
    0xab, 0xb8, 0x13, 0xcf, 0xf7, 0x06, 0x17, 0xf1, 0x0f, 0x5e, 0x79, 0x97, 0x04, 0xc1, 0x62, 0x05, 0x73, 0x68, 0x7c, 0xd9, 0x36, 0xdb, 0x7a, 0xe6,
    0xb8, 0x2b, 0x49, 0x03, 0x93, 0x67, 0x4f, 0x42, 0x7e, 0x2c, 0xe6, 0x59, 0xe2, 0x50, 0xe7, 0x6f, 0xa9, 0xcd, 0x6a, 0x22, 0xf2, 0x99, 0xac, 0x97,
    0x63, 0x6c, 0x70, 0x3c, 0x83, 0x83, 0x28, 0x93, 0xe9, 0x05, 0x77, 0xcf, 0x76, 0xc9, 0x4f, 0x8a, 0x5a, 0x99, 0xc5, 0x1e, 0x96, 0xdf, 0x5e, 0xf2,
    0xae, 0x40, 0x9a, 0xb9, 0xf8, 0xf1, 0xcd, 0xfa, 0x9b, 0x0c, 0xb3, 0xf2, 0x0c, 0xd8, 0xb5, 0x80, 0xaf, 0x78, 0x94, 0x4c, 0x84, 0x52, 0x20, 0xbc,
    0xf1, 0x43, 0xac, 0x28, 0x24, 0xa9, 0x3f, 0x67, 0x9f, 0x63, 0xbc, 0xcc, 0xf4, 0xb3, 0xa2, 0xcb, 0xf9, 0x26, 0x7d, 0xa2, 0x28, 0x52, 0x5f, 0x01,
    0x5c, 0x42, 0x2f, 0x3b, 0x2b, 0x86, 0x08, 0x12, 0xee, 0x24, 0xdb, 0x1e, 0xc4, 0x76, 0x6f, 0xbe, 0x13, 0xaf, 0x79, 0x15, 0xc3, 0xee, 0x9e, 0xeb,
    0xc6, 0xa1, 0x58, 0x75, 0xf3, 0x72, 0xae, 0x5a, 0x5b, 0xdb, 0x59, 0x58, 0x7e, 0x26, 0x9f,
  ]);

  const padding = new Uint32Array([0x6861c04b, 0xfb2decf8, 0xa5a80dcd]);

  ctx.cipher = createCipher(ctx);

  const clientDH = createClientDHParams(ctx, b, padding);

  expect(clientDH.nonce).toEqual(ctx.nonce);
  expect(clientDH.server_nonce).toEqual(ctx.serverNonce);
  expect(ab2i(clientDH.encrypted_data)).toEqual(
    new Uint32Array([
      0x8f981940, 0xcb22be5a, 0xcddf9bae, 0x91cde160, 0x1a526bfd, 0xc6b9f640, 0x62f304d7, 0x14821c16, 0xd181bd4f, 0xb5523748, 0x2347542a, 0xd609c198,
      0x6ec33e8d, 0xbb494e95, 0xf56a8b0c, 0x7b2e34d4, 0x566c4fb9, 0xefac9ecf, 0xdc5ecd97, 0x68b08f96, 0xf3812d21, 0x4ad664f7, 0x19ff61b0, 0x03ca944b,
      0x6d1771f2, 0x587132e3, 0xa47c3ad9, 0x464275e4, 0x67d2a6d1, 0x5e0d8411, 0xb888007f, 0xf7a22ba3, 0xd40fe08a, 0x583cbd94, 0x17c11399, 0x8c38bde9,
      0x84a0315e, 0x52554018, 0xa479320f, 0x04f5b003, 0x3990d082, 0xa9402437, 0x6b42cf74, 0xcd27fd6f, 0x0605d89f, 0x3a0e2719, 0xd4caee3c, 0xda132b59,
      0x14faeee2, 0x90bca15a, 0xcc42491d, 0xae6ceece, 0xe934a795, 0xd17545ab, 0x19066282, 0xb6a59c7a, 0xc5ff09b9, 0xaad31cf6, 0x464b2e98, 0x9e99b0bb,
      0x19aeee8d, 0x20e59c0d, 0x9c112d41, 0x3800369e, 0xb8616de4, 0x0cc2703d, 0x8a926dfd, 0x9ff741c7, 0x07a35120, 0xf79c3a91, 0x7805bcf4, 0x55be143e,
      0x364d3c04, 0x5b10f48a, 0x5c66be3a, 0xf9a0d6b5, 0x16fe5e05, 0x61ad0e95, 0x3af1efb6, 0xaed9a90b, 0xfc5090f6, 0x2e49aa8f, 0x4a63ef7e, 0x89ce2887,
    ]),
  );

  expect(ctx.key).toEqual(
    new Uint32Array([
      0x930c1741, 0x9da0f960, 0xd92af8d6, 0x5acb5cd3, 0xd8f2beab, 0x9c62c867, 0xd348afaa, 0x34de6a52, 0xd696fc45, 0x5ca65d7d, 0xc1d1ce40, 0x438e0446,
      0x9b92fd53, 0x01b90495, 0x6252c953, 0x51307148, 0x5947d5dd, 0xad2bb050, 0xabcd8ced, 0x0126eb61, 0x90bd8f23, 0xc046270c, 0xf483e07e, 0x3ba2aa3a,
      0x866a1fb0, 0x84464ec3, 0xe39cfe09, 0x8fbc1052, 0x6656248f, 0xb5a1f0da, 0x366e7998, 0xe149f867, 0x37149cbe, 0x50127887, 0xc3d64476, 0x216de9fb,
      0x125cb738, 0x86661556, 0xbd9cf83d, 0x80fdcea3, 0x5f21be24, 0xd83301d2, 0x54480fa6, 0xb1f58bf2, 0x5d03181f, 0xc35891d9, 0x73073a56, 0xc0f5cece,
      0x0a9749df, 0x978e072e, 0x4c8c2900, 0x93d56be0, 0x19fe403b, 0x7ba12a3e, 0xe87ac221, 0x14c3a1a5, 0xe133ed4b, 0xf3e5595d, 0xd44afa2a, 0xe2e380ac,
      0xf63c93f3, 0xe63d556b, 0x4fc9e07b, 0x0310162c,
    ]),
  );
});

test('auth | create key', () => {
  const client = new Client(tl, {
    test: true,
    dc: 2,
    autoConnect: false,
    meta: {},
    debug: false,
  });

  const async = new Promise<AuthKey>((resolve, reject) => {
    createAuthKey(client, 2, 1, 0, (err, key) => {
      if (err) reject(err);
      else resolve(key);
    });
  });

  return async.then((key: AuthKey) => {
    if (!key) throw new Error('Key is nullable');
    expect(key.id.length).toBe(16);
  });
}, 60000);

test('Auth | binding and init session', () => {
  const client = new Client(tl, {
    test: true,
    dc: 2,
    autoConnect: false,
    meta: {},
    debug: false,
  });

  const async = new Promise<boolean>((resolve, reject) => {
    createAuthKey(client, 2, 1, 0, (err, k) => {
      if (err) reject(err);
      if (!k) {
        reject(new Error('Expected perm auth key'));
        return;
      }

      const permKey = k;

      createAuthKey(client, 2, 1, 3600 * 1, (errp, kp) => {
        if (errp) reject(errp);
        if (!kp) {
          reject(new Error('Expected temp auth key'));
          return;
        }

        const tempKey = kp;

        bindTempAuthKey(client, 2, permKey, tempKey, (res) => {
          if (!res) reject(new Error('Expected binding'));
          else initConnection(client, 2, resolve);
        });
      });
    });
  });

  return async.then((result) => {
    expect(result).toBeTruthy();
  });
}, 150000);
